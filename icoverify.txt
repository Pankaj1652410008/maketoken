// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

interface AggregatorV3Interface {
    function latestRoundData()
        external
        view
        returns (
            uint80 roundId,
            int256 answer,
            uint256 startedAt,
            uint256 updatedAt,
            uint80 answeredInRound
        );
}

contract TokenCrowdsale {
    address public token;
    address public wallet;
    uint256 public rateUsd;
    uint256 public capUsd;
    uint256 public raisedUsd;
    uint256 public endTime;
    AggregatorV3Interface public priceFeed;
    address public owner;

    event TokensPurchased(address indexed buyer, uint256 amountPaid, uint256 tokensIssued);

    constructor(
        address _token,
        uint256 _rateUsd,
        uint256 _capUsd,
        uint256 _durationSeconds,
        address _wallet,
        address _priceFeed
    ) {
        require(_wallet != address(0), "Wallet is zero");
        token = _token;
        rateUsd = _rateUsd;
        capUsd = _capUsd;
        endTime = block.timestamp + _durationSeconds;
        wallet = _wallet;
        priceFeed = AggregatorV3Interface(_priceFeed);
        owner = msg.sender;
    }

    function buyTokens() external payable {
        require(block.timestamp <= endTime, "ICO ended");
        require(msg.value > 0, "No ETH sent");

        (, int256 ethUsdPrice,,,) = priceFeed.latestRoundData();
        require(ethUsdPrice > 0, "Invalid price");

        uint256 ethUsd = uint256(ethUsdPrice);
        uint256 usdAmount = (msg.value * ethUsd) / 1e8;

        require(raisedUsd + usdAmount <= capUsd, "Cap exceeded");

        uint256 tokensToSend = (usdAmount * (10 ** 18)) / rateUsd;
        raisedUsd += usdAmount;

        require(CustomToken(token).transfer(msg.sender, tokensToSend), "Token transfer failed");
        payable(wallet).transfer(msg.value);

        emit TokensPurchased(msg.sender, msg.value, tokensToSend);
    }
}

// ERC20 interface for transfer
interface CustomToken {
    function transfer(address to, uint256 value) external returns (bool);
}
